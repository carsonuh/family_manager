{"ast":null,"code":"var _jsxFileName = \"/Users/carson/Documents/GitHub/family_manager/family-manager/src/components/ShoppingList.jsx\";\nimport React, { Component } from \"react\";\nimport firebase from '../firebase.js';\nimport DisplayItem from \"./DisplayItem\";\nimport \"./shoppingList.css\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Box from '@material-ui/core/Box';\nimport { CardHeader, IconButton, Tooltip, CardActions, Button, TextField } from \"@material-ui/core\";\nimport AddIcon from '@material-ui/icons/Add';\n\nclass ShoppingList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userEmail: this.props.userEmail,\n      fireDocId: null,\n      newItem: \"\",\n      items: []\n    };\n    this.fetchListData = this.fetchListData.bind(this);\n    this.checkIfUserExists = this.checkIfUserExists.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this); //this.addItem = this.addItem.bind(this);\n  }\n\n  componentDidMount() {\n    //Upon loading the component, check to see if a user exists\n    //Return data into the callback and execute a data update\n    this.checkIfUserExists(this.fetchListData);\n  }\n  /**\n   * Checks to see if a signed in user has data in the DB\n   * Returns a boolean of the above condition into the callback\n   * @param {callback function} callback \n   */\n\n\n  checkIfUserExists(callback) {\n    //Connect to the firebase DB\n    const db = firebase.firestore(); //Query the DB to see if the users email is present\n\n    db.collection(\"TestShoppingList\").where(\"email\", \"==\", this.state.userEmail).get().then(querySnapshot => {\n      let userExists = false; //If the email isn't present, the user doesn't exist\n\n      if (querySnapshot.size === 0) {\n        userExists = false;\n      } else {\n        //If the email does exist, update the firestore document ID in state\n        this.setState({\n          fireDocId: querySnapshot.docs[0].id\n        });\n        userExists = true;\n      }\n\n      callback(userExists);\n    }).catch(error => {\n      console.log(\"Error Getting Documents! \" + error);\n    });\n  }\n  /**\n   * Loads user data into the calendar via a DB call and a state update\n   * @param {whether a user exists} userExists \n   */\n\n\n  fetchListData(userExists) {\n    //If a user exists pull their event data from the DB\n    if (userExists) {\n      console.log('user exists, fetching data');\n      const db = firebase.firestore();\n      db.collection(\"TestShoppingList\").doc(this.state.fireDocId).get().then(doc => {\n        if (doc) {\n          let returnedData = doc.data().items;\n          console.log(returnedData);\n          this.setState({\n            items: returnedData\n          });\n        } else {\n          console.log('Counldnt find user data');\n        }\n      }).catch(error => {\n        console.log(\"error fetching existing user data! \" + error);\n      });\n    } else {\n      //This block is executed if it's a users first time logging in\n      alert(\"Welcome, Start by adding some data to the calendar\"); //Create an entry in the DB for the new user, update the doc ref\n      //with the one retuned from add()\n\n      const db = firebase.firestore();\n      db.collection(\"TestShoppingList\").add({\n        email: this.state.userEmail,\n        items: []\n      }).then(docRef => {\n        this.setState({\n          fireDocId: docRef.id\n        });\n      }).catch(error => {\n        console.log(\"error submitting first time user data\" + error);\n      });\n    }\n  }\n  /**\n   * When a new event is added send it to the DB \n   * @param {new event data} itemData \n   */\n\n\n  updateStorage(itemData) {\n    const db = firebase.firestore();\n    const itemList = db.collection(\"TestShoppingList\").doc(this.state.fireDocId).update({\n      items: firebase.firestore.FieldValue.arrayUnion(itemData)\n    });\n  }\n\n  handleChange(e) {\n    this.setState({\n      newItem: e.target.value\n    });\n  }\n\n  handleClick() {\n    if (this.state.newItem !== \"\") {\n      this.setState(prevState => {\n        return {\n          items: prevState.items.concat(this.state.newItem)\n        };\n      });\n      this.updateStorage(this.state.newItem);\n    } else {\n      console.log(\"not updated\");\n    }\n\n    this.setState({\n      newItem: \"\"\n    });\n  }\n  /*\n  handleCBChange(id) {\n      this.setState(prevState => {\n          const updatedList = prevState.items.map(item => {\n              if (todo.id === id) {\n                  todo.completed = !todo.completed\n              }\n              return todo\n          })\n          return {\n              todos: updatedTodos\n          }\n      })\n  }\n  */\n\n\n  render() {\n    const itemCB = this.state.items.map((item, index) => {\n      return React.createElement(DisplayItem, {\n        item: item.item,\n        completed: item.completed,\n        id: index,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      });\n    });\n    return React.createElement(Box, {\n      className: \"box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"card\",\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(CardHeader, {\n      action: React.createElement(Tooltip, {\n        title: \"Add Item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        \"aria-label\": \"add\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(AddIcon, {\n        style: {\n          fill: \"#4caf50\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }))),\n      title: \"Shopping List\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, itemCB), React.createElement(CardActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      id: \"addItem\",\n      size: \"small\",\n      label: \"Add Item\",\n      variant: \"outlined\",\n      value: this.state.newItem,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.handleClick,\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Go\"))));\n  }\n\n}\n\nexport default ShoppingList;","map":{"version":3,"sources":["/Users/carson/Documents/GitHub/family_manager/family-manager/src/components/ShoppingList.jsx"],"names":["React","Component","firebase","DisplayItem","Card","CardContent","Box","CardHeader","IconButton","Tooltip","CardActions","Button","TextField","AddIcon","ShoppingList","constructor","props","state","userEmail","fireDocId","newItem","items","fetchListData","bind","checkIfUserExists","handleChange","handleClick","componentDidMount","callback","db","firestore","collection","where","get","then","querySnapshot","userExists","size","setState","docs","id","catch","error","console","log","doc","returnedData","data","alert","add","email","docRef","updateStorage","itemData","itemList","update","FieldValue","arrayUnion","e","target","value","prevState","concat","render","itemCB","map","item","index","completed","fill"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\nimport firebase from '../firebase.js';\nimport DisplayItem from \"./DisplayItem\"\nimport \"./shoppingList.css\"\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Box from '@material-ui/core/Box';\nimport { CardHeader, IconButton, Tooltip, CardActions, Button, TextField } from \"@material-ui/core\";\nimport AddIcon from '@material-ui/icons/Add';\n\nclass ShoppingList extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            userEmail: this.props.userEmail, \n            fireDocId: null,\n            newItem: \"\",\n            items: []\n        }\n        this.fetchListData = this.fetchListData.bind(this);\n        this.checkIfUserExists = this.checkIfUserExists.bind(this);\n        this.handleChange = this.handleChange.bind(this)\n        this.handleClick = this.handleClick.bind(this)\n        //this.addItem = this.addItem.bind(this);\n    }\n\n    componentDidMount() {\n        //Upon loading the component, check to see if a user exists\n        //Return data into the callback and execute a data update\n        this.checkIfUserExists(this.fetchListData)\n    }\n\n    /**\n     * Checks to see if a signed in user has data in the DB\n     * Returns a boolean of the above condition into the callback\n     * @param {callback function} callback \n     */\n    checkIfUserExists(callback) {\n        //Connect to the firebase DB\n        const db = firebase.firestore();\n\n        //Query the DB to see if the users email is present\n        db.collection(\"TestShoppingList\").where(\"email\", \"==\", this.state.userEmail)\n            .get()\n            .then((querySnapshot) => {\n                let userExists = false;\n\n                //If the email isn't present, the user doesn't exist\n                if(querySnapshot.size === 0) {\n                    userExists = false;\n                } else {\n                    //If the email does exist, update the firestore document ID in state\n                    this.setState({fireDocId: querySnapshot.docs[0].id});\n                    userExists = true;\n                }\n                callback(userExists)\n            })\n            .catch((error) => {\n                console.log(\"Error Getting Documents! \" + error);\n            });\n    }\n\n    /**\n     * Loads user data into the calendar via a DB call and a state update\n     * @param {whether a user exists} userExists \n     */\n    fetchListData(userExists) {\n\n        //If a user exists pull their event data from the DB\n        if(userExists) {\n            console.log('user exists, fetching data');\n            const db = firebase.firestore();\n            db.collection(\"TestShoppingList\").doc(this.state.fireDocId)\n                .get()\n                .then((doc) => {\n                    if(doc) {\n                        let returnedData = doc.data().items;\n                        console.log(returnedData);\n                        this.setState({items: returnedData});\n                    } else {\n                        console.log('Counldnt find user data');\n                    }\n                })\n                .catch((error) => {\n                    console.log(\"error fetching existing user data! \" + error);\n                })\n        } else {\n            //This block is executed if it's a users first time logging in\n            alert(\"Welcome, Start by adding some data to the calendar\");\n            \n            //Create an entry in the DB for the new user, update the doc ref\n            //with the one retuned from add()\n            const db = firebase.firestore();\n            db.collection(\"TestShoppingList\").add({\n                email: this.state.userEmail,\n                items: []\n            }).then((docRef) => {\n                this.setState({fireDocId: docRef.id});\n            })\n            .catch((error) => {\n                console.log(\"error submitting first time user data\" + error); \n            })\n        }\n    }\n\n    /**\n     * When a new event is added send it to the DB \n     * @param {new event data} itemData \n     */\n    updateStorage(itemData) {\n        const db = firebase.firestore();\n        const itemList = db.collection(\"TestShoppingList\").doc(this.state.fireDocId).update({\n            items: firebase.firestore.FieldValue.arrayUnion(itemData)\n        });\n    }\n \n    handleChange(e) {\n        this.setState({newItem: e.target.value})\n    }\n\n    handleClick() {\n        if(this.state.newItem !== \"\"){\n        this.setState(prevState => {\n            return {items: prevState.items.concat(this.state.newItem)}\n        })\n        this.updateStorage(this.state.newItem);\n        }\n        else{\n            console.log(\"not updated\")\n        }\n\n        this.setState({newItem: \"\"})\n    }\n\n    /*\n    handleCBChange(id) {\n        this.setState(prevState => {\n            const updatedList = prevState.items.map(item => {\n                if (todo.id === id) {\n                    todo.completed = !todo.completed\n                }\n                return todo\n            })\n            return {\n                todos: updatedTodos\n            }\n        })\n    }\n    */\n\n \n\n    render()\n    {\n        const itemCB = this.state.items.map((item, index) => {\n            return  <DisplayItem item={item.item} completed={item.completed} id={index} key={index} />\n          });\n        return (\n       \n       <Box className=\"box\">\n           <Card className=\"card\" variant=\"outlined\">\n               <CardHeader\n                   action={\n                       <Tooltip title=\"Add Item\"> \n                        <IconButton aria-label=\"add\">\n                            <AddIcon style={{fill: \"#4caf50\"}} />\n                        </IconButton>\n                   </Tooltip>\n                   \n                    }\n                    title=\"Shopping List\"\n                />\n                <CardContent>\n                    {itemCB}\n                </CardContent>\n                <CardActions>\n                    <TextField id=\"addItem\" size=\"small\" label=\"Add Item\" variant=\"outlined\" value={this.state.newItem} onChange={this.handleChange} />\n                    <Button onClick={this.handleClick} size=\"small\">\n                        Go\n                    </Button>\n                </CardActions>\n            </Card>\n       </Box>\n       \n    )\n}\n}\n \nexport default ShoppingList"]},"metadata":{},"sourceType":"module"}