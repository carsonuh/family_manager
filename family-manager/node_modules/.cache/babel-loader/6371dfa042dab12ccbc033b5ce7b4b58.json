{"ast":null,"code":"var _jsxFileName = \"/Users/carson/Documents/GitHub/family_manager/family-manager/src/components/ShoppingList.jsx\";\nimport React, { Component } from \"react\";\nimport firebase from '../firebase.js';\nimport DisplayItem from \"./DisplayItem\";\nimport \"./shoppingList.css\";\n\nclass ShoppingList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userEmail: this.props.userEmail,\n      fireDocId: null,\n      items: []\n    };\n    this.fetchListData = this.fetchListData.bind(this);\n    this.checkIfUserExists = this.checkIfUserExists.bind(this);\n    this.addItem = this.addItem.bind(this);\n  }\n\n  componentDidMount() {\n    //Upon loading the component, check to see if a user exists\n    //Return data into the callback and execute a data update\n    this.checkIfUserExists(this.fetchListData);\n  }\n  /**\n   * Checks to see if a signed in user has data in the DB\n   * Returns a boolean of the above condition into the callback\n   * @param {callback function} callback \n   */\n\n\n  checkIfUserExists(callback) {\n    //Connect to the firebase DB\n    const db = firebase.firestore(); //Query the DB to see if the users email is present\n\n    db.collection(\"TestShoppingList\").where(\"email\", \"==\", this.state.userEmail).get().then(querySnapshot => {\n      let userExists = false; //If the email isn't present, the user doesn't exist\n\n      if (querySnapshot.size === 0) {\n        userExists = false;\n      } else {\n        //If the email does exist, update the firestore document ID in state\n        this.setState({\n          fireDocId: querySnapshot.docs[0].id\n        });\n        userExists = true;\n      }\n\n      callback(userExists);\n    }).catch(error => {\n      console.log(\"Error Getting Documents! \" + error);\n    });\n  }\n  /**\n   * Loads user data into the calendar via a DB call and a state update\n   * @param {whether a user exists} userExists \n   */\n\n\n  fetchListData(userExists) {\n    //If a user exists pull their event data from the DB\n    if (userExists) {\n      console.log('user exists, fetching data');\n      const db = firebase.firestore();\n      db.collection(\"TestShoppingList\").doc(this.state.fireDocId).get().then(doc => {\n        if (doc) {\n          let returnedData = doc.data().items;\n          console.log(returnedData);\n          this.setState({\n            items: returnedData\n          });\n        } else {\n          console.log('Counldnt find user data');\n        }\n      }).catch(error => {\n        console.log(\"error fetching existing user data! \" + error);\n      });\n    } else {\n      //This block is executed if it's a users first time logging in\n      alert(\"Welcome, Start by adding some data to the calendar\"); //Create an entry in the DB for the new user, update the doc ref\n      //with the one retuned from add()\n\n      const db = firebase.firestore();\n      db.collection(\"TestShoppingList\").add({\n        email: this.state.userEmail,\n        items: []\n      }).then(docRef => {\n        this.setState({\n          fireDocId: docRef.id\n        });\n      }).catch(error => {\n        console.log(\"error submitting first time user data\" + error);\n      });\n    }\n  }\n  /**\n   * When a new event is added send it to the DB \n   * @param {new event data} itemData \n   */\n\n\n  updateStorage(itemData) {\n    const db = firebase.firestore();\n    const userRef = db.collection(\"TestShoppingList\").doc(this.state.fireDocId).update({\n      items: firebase.firestore.FieldValue.arrayUnion(itemData)\n    });\n  }\n\n  addItem(event) {\n    event.preventDefault();\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      items: [...this.state.items, {\n        value\n      }]\n    });\n    this.updateStorage({\n      value\n    });\n  }\n\n  render() {\n    const itemCB = this.state.items.map(i => React.createElement(DisplayItem, {\n      item: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Shopping List\"), itemCB, this.state.items, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Add Item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.addItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Go\")));\n  }\n\n}\n\nexport default ShoppingList;","map":{"version":3,"sources":["/Users/carson/Documents/GitHub/family_manager/family-manager/src/components/ShoppingList.jsx"],"names":["React","Component","firebase","DisplayItem","ShoppingList","constructor","props","state","userEmail","fireDocId","items","fetchListData","bind","checkIfUserExists","addItem","componentDidMount","callback","db","firestore","collection","where","get","then","querySnapshot","userExists","size","setState","docs","id","catch","error","console","log","doc","returnedData","data","alert","add","email","docRef","updateStorage","itemData","userRef","update","FieldValue","arrayUnion","event","preventDefault","name","value","target","render","itemCB","map","i"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\nimport firebase from '../firebase.js';\nimport DisplayItem from \"./DisplayItem\"\nimport \"./shoppingList.css\"\n\nclass ShoppingList extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            userEmail: this.props.userEmail, \n            fireDocId: null,\n            items: []\n        }\n        this.fetchListData = this.fetchListData.bind(this);\n        this.checkIfUserExists = this.checkIfUserExists.bind(this);\n        this.addItem = this.addItem.bind(this);\n    }\n\n    componentDidMount() {\n        //Upon loading the component, check to see if a user exists\n        //Return data into the callback and execute a data update\n        this.checkIfUserExists(this.fetchListData)\n    }\n\n    /**\n     * Checks to see if a signed in user has data in the DB\n     * Returns a boolean of the above condition into the callback\n     * @param {callback function} callback \n     */\n    checkIfUserExists(callback) {\n        //Connect to the firebase DB\n        const db = firebase.firestore();\n\n        //Query the DB to see if the users email is present\n        db.collection(\"TestShoppingList\").where(\"email\", \"==\", this.state.userEmail)\n            .get()\n            .then((querySnapshot) => {\n                let userExists = false;\n\n                //If the email isn't present, the user doesn't exist\n                if(querySnapshot.size === 0) {\n                    userExists = false;\n                } else {\n                    //If the email does exist, update the firestore document ID in state\n                    this.setState({fireDocId: querySnapshot.docs[0].id});\n                    userExists = true;\n                }\n                callback(userExists)\n            })\n            .catch((error) => {\n                console.log(\"Error Getting Documents! \" + error);\n            });\n    }\n\n    /**\n     * Loads user data into the calendar via a DB call and a state update\n     * @param {whether a user exists} userExists \n     */\n    fetchListData(userExists) {\n\n        //If a user exists pull their event data from the DB\n        if(userExists) {\n            console.log('user exists, fetching data');\n            const db = firebase.firestore();\n            db.collection(\"TestShoppingList\").doc(this.state.fireDocId)\n                .get()\n                .then((doc) => {\n                    if(doc) {\n                        let returnedData = doc.data().items;\n                        console.log(returnedData);\n                        this.setState({items: returnedData});\n                    } else {\n                        console.log('Counldnt find user data');\n                    }\n                })\n                .catch((error) => {\n                    console.log(\"error fetching existing user data! \" + error);\n                })\n        } else {\n            //This block is executed if it's a users first time logging in\n            alert(\"Welcome, Start by adding some data to the calendar\");\n            \n            //Create an entry in the DB for the new user, update the doc ref\n            //with the one retuned from add()\n            const db = firebase.firestore();\n            db.collection(\"TestShoppingList\").add({\n                email: this.state.userEmail,\n                items: []\n            }).then((docRef) => {\n                this.setState({fireDocId: docRef.id});\n            })\n            .catch((error) => {\n                console.log(\"error submitting first time user data\" + error); \n            })\n        }\n    }\n\n    /**\n     * When a new event is added send it to the DB \n     * @param {new event data} itemData \n     */\n    updateStorage(itemData) {\n        const db = firebase.firestore();\n        const userRef = db.collection(\"TestShoppingList\").doc(this.state.fireDocId).update({\n            items: firebase.firestore.FieldValue.arrayUnion(itemData)\n        });\n    }\n\n    addItem(event) {\n        event.preventDefault()\n        const {name, value} = event.target;\n\n        this.setState({\n            items: [\n                ...this.state.items,\n                {value},\n            ]\n        });\n        this.updateStorage({value});\n    }\n \n\n    render()\n    {\n      \n        const itemCB = this.state.items.map(i => \n        <DisplayItem item={i} />)\n        return (\n        <div className=\"list\">\n            <h1>Shopping List</h1>\n\n                {itemCB}\n                {this.state.items }\n            <form>\n                <input type=\"text\" placeholder=\"Add Item\" />\n                <button onClick={this.addItem}>Go</button>\n            </form>\n        </div>\n    )\n}\n}\n \nexport default ShoppingList"]},"metadata":{},"sourceType":"module"}