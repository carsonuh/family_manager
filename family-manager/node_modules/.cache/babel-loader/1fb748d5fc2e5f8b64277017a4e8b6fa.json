{"ast":null,"code":"var _jsxFileName = \"/Users/carson/Documents/GitHub/family_manager/family-manager/src/components/ShoppingList.jsx\";\nimport React, { Component } from \"react\";\nimport firebase from '../firebase.js';\nimport DisplayItem from \"./DisplayItem\";\nimport \"./shoppingList.css\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Box from '@material-ui/core/Box';\nimport { CardHeader, IconButton, Tooltip } from \"@material-ui/core\";\nimport AddIcon from '@material-ui/icons/Add';\n\nclass ShoppingList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSelect = () => {\n      const itemName = window.prompt(\"Item name\");\n\n      if (itemName) {\n        this.setState({\n          items: [...this.state.items, {\n            itemName\n          }]\n        }); //update db\n      } else {\n        console.log(\"Not valid\");\n      }\n    };\n\n    this.state = {\n      userEmail: this.props.userEmail,\n      fireDocId: null,\n      newItem: \"\",\n      items: []\n    };\n    this.fetchListData = this.fetchListData.bind(this);\n    this.checkIfUserExists = this.checkIfUserExists.bind(this); //this.addItem = this.addItem.bind(this);\n  }\n\n  componentDidMount() {\n    //Upon loading the component, check to see if a user exists\n    //Return data into the callback and execute a data update\n    this.checkIfUserExists(this.fetchListData);\n  }\n  /**\n   * Checks to see if a signed in user has data in the DB\n   * Returns a boolean of the above condition into the callback\n   * @param {callback function} callback \n   */\n\n\n  checkIfUserExists(callback) {\n    //Connect to the firebase DB\n    const db = firebase.firestore(); //Query the DB to see if the users email is present\n\n    db.collection(\"TestShoppingList\").where(\"email\", \"==\", this.state.userEmail).get().then(querySnapshot => {\n      let userExists = false; //If the email isn't present, the user doesn't exist\n\n      if (querySnapshot.size === 0) {\n        userExists = false;\n      } else {\n        //If the email does exist, update the firestore document ID in state\n        this.setState({\n          fireDocId: querySnapshot.docs[0].id\n        });\n        userExists = true;\n      }\n\n      callback(userExists);\n    }).catch(error => {\n      console.log(\"Error Getting Documents! \" + error);\n    });\n  }\n  /**\n   * Loads user data into the calendar via a DB call and a state update\n   * @param {whether a user exists} userExists \n   */\n\n\n  fetchListData(userExists) {\n    //If a user exists pull their event data from the DB\n    if (userExists) {\n      console.log('user exists, fetching data');\n      const db = firebase.firestore();\n      db.collection(\"TestShoppingList\").doc(this.state.fireDocId).get().then(doc => {\n        if (doc) {\n          let returnedData = doc.data().items;\n          console.log(returnedData);\n          this.setState({\n            items: returnedData\n          });\n        } else {\n          console.log('Counldnt find user data');\n        }\n      }).catch(error => {\n        console.log(\"error fetching existing user data! \" + error);\n      });\n    } else {\n      //This block is executed if it's a users first time logging in\n      alert(\"Welcome, Start by adding some data to the calendar\"); //Create an entry in the DB for the new user, update the doc ref\n      //with the one retuned from add()\n\n      const db = firebase.firestore();\n      db.collection(\"TestShoppingList\").add({\n        email: this.state.userEmail,\n        items: []\n      }).then(docRef => {\n        this.setState({\n          fireDocId: docRef.id\n        });\n      }).catch(error => {\n        console.log(\"error submitting first time user data\" + error);\n      });\n    }\n  }\n  /**\n   * When a new event is added send it to the DB \n   * @param {new event data} itemData \n   */\n\n\n  updateStorage(itemData) {\n    const db = firebase.firestore();\n    const userRef = db.collection(\"TestShoppingList\").doc(this.state.fireDocId).update({\n      items: firebase.firestore.FieldValue.arrayUnion(itemData)\n    });\n  }\n\n  handleChange(e) {\n    this.setState({\n      newItem: e.target.value\n    });\n  }\n  /*\n   addItem(event) {\n      event.preventDefault()\n      const {name, value} = event.target;\n       if(value) {\n          this.setState({\n              items: [\n                  ...this.state.items,\n                  this.state.newItem,\n              ]\n          });\n          this.updateStorage(this.state.items);\n      }\n      else{\n          console.log(\"Empty field.\")\n          alert(\"empty\")\n      }\n      \n  }\n   */\n\n\n  render() {\n    const itemCB = this.state.items.map(i => {\n      return React.createElement(DisplayItem, {\n        item: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      });\n    });\n    return (\n      /*\n      <div className=\"list\">\n      <h1>Shopping List</h1>\n           {itemCB}\n      <form>\n          <input type=\"text\" placeholder=\"Add Item\" onChange={this.handleChange} />\n          <button onClick={this.addItem}>Go</button>\n      </form>\n      </div>\n      */\n      React.createElement(Box, {\n        className: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(Card, {\n        className: \"card\",\n        variant: \"outlined\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        action: React.createElement(Tooltip, {\n          title: \"Add Item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }, React.createElement(IconButton, {\n          \"aria-label\": \"add\",\n          onClick: this.handleSelect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }, React.createElement(AddIcon, {\n          style: {\n            fill: \"#4caf50\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }))),\n        title: \"Shopping List\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }), React.createElement(CardContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, itemCB)))\n    );\n  }\n\n}\n\nexport default ShoppingList;","map":{"version":3,"sources":["/Users/carson/Documents/GitHub/family_manager/family-manager/src/components/ShoppingList.jsx"],"names":["React","Component","firebase","DisplayItem","Card","CardContent","Box","CardHeader","IconButton","Tooltip","AddIcon","ShoppingList","constructor","props","handleSelect","itemName","window","prompt","setState","items","state","console","log","userEmail","fireDocId","newItem","fetchListData","bind","checkIfUserExists","componentDidMount","callback","db","firestore","collection","where","get","then","querySnapshot","userExists","size","docs","id","catch","error","doc","returnedData","data","alert","add","email","docRef","updateStorage","itemData","userRef","update","FieldValue","arrayUnion","handleChange","e","target","value","render","itemCB","map","i","fill"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"\nimport firebase from '../firebase.js';\nimport DisplayItem from \"./DisplayItem\"\nimport \"./shoppingList.css\"\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Box from '@material-ui/core/Box';\nimport { CardHeader, IconButton, Tooltip } from \"@material-ui/core\";\nimport AddIcon from '@material-ui/icons/Add';\n\nclass ShoppingList extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            userEmail: this.props.userEmail, \n            fireDocId: null,\n            newItem: \"\",\n            items: []\n        }\n        this.fetchListData = this.fetchListData.bind(this);\n        this.checkIfUserExists = this.checkIfUserExists.bind(this);\n        //this.addItem = this.addItem.bind(this);\n    }\n\n    componentDidMount() {\n        //Upon loading the component, check to see if a user exists\n        //Return data into the callback and execute a data update\n        this.checkIfUserExists(this.fetchListData)\n    }\n\n    /**\n     * Checks to see if a signed in user has data in the DB\n     * Returns a boolean of the above condition into the callback\n     * @param {callback function} callback \n     */\n    checkIfUserExists(callback) {\n        //Connect to the firebase DB\n        const db = firebase.firestore();\n\n        //Query the DB to see if the users email is present\n        db.collection(\"TestShoppingList\").where(\"email\", \"==\", this.state.userEmail)\n            .get()\n            .then((querySnapshot) => {\n                let userExists = false;\n\n                //If the email isn't present, the user doesn't exist\n                if(querySnapshot.size === 0) {\n                    userExists = false;\n                } else {\n                    //If the email does exist, update the firestore document ID in state\n                    this.setState({fireDocId: querySnapshot.docs[0].id});\n                    userExists = true;\n                }\n                callback(userExists)\n            })\n            .catch((error) => {\n                console.log(\"Error Getting Documents! \" + error);\n            });\n    }\n\n    /**\n     * Loads user data into the calendar via a DB call and a state update\n     * @param {whether a user exists} userExists \n     */\n    fetchListData(userExists) {\n\n        //If a user exists pull their event data from the DB\n        if(userExists) {\n            console.log('user exists, fetching data');\n            const db = firebase.firestore();\n            db.collection(\"TestShoppingList\").doc(this.state.fireDocId)\n                .get()\n                .then((doc) => {\n                    if(doc) {\n                        let returnedData = doc.data().items;\n                        console.log(returnedData);\n                        this.setState({items: returnedData});\n                    } else {\n                        console.log('Counldnt find user data');\n                    }\n                })\n                .catch((error) => {\n                    console.log(\"error fetching existing user data! \" + error);\n                })\n        } else {\n            //This block is executed if it's a users first time logging in\n            alert(\"Welcome, Start by adding some data to the calendar\");\n            \n            //Create an entry in the DB for the new user, update the doc ref\n            //with the one retuned from add()\n            const db = firebase.firestore();\n            db.collection(\"TestShoppingList\").add({\n                email: this.state.userEmail,\n                items: []\n            }).then((docRef) => {\n                this.setState({fireDocId: docRef.id});\n            })\n            .catch((error) => {\n                console.log(\"error submitting first time user data\" + error); \n            })\n        }\n    }\n\n    /**\n     * When a new event is added send it to the DB \n     * @param {new event data} itemData \n     */\n    updateStorage(itemData) {\n        const db = firebase.firestore();\n        const userRef = db.collection(\"TestShoppingList\").doc(this.state.fireDocId).update({\n            items: firebase.firestore.FieldValue.arrayUnion(itemData)\n        });\n    }\n\n    handleChange(e) {\n        this.setState({newItem: e.target.value})\n    }\n\n    /*\n\n    addItem(event) {\n        event.preventDefault()\n        const {name, value} = event.target;\n\n        if(value) {\n            this.setState({\n                items: [\n                    ...this.state.items,\n                    this.state.newItem,\n                ]\n            });\n            this.updateStorage(this.state.items);\n        }\n        else{\n            console.log(\"Empty field.\")\n            alert(\"empty\")\n        }\n        \n    }\n\n    */\n\n    handleSelect=() => {\n        const itemName = window.prompt(\"Item name\");\n        if(itemName) {\n            this.setState({\n                items: [\n                    ...this.state.items,\n                    {\n                        itemName\n                    },\n                ],\n            });\n            //update db\n        }\n        else{\n            console.log(\"Not valid\")\n        }\n    }\n \n\n    render()\n    {\n      \n        const itemCB = this.state.items.map(i => {\n            return  <DisplayItem item={i} />\n          });\n        return (\n            /*\n        <div className=\"list\">\n            <h1>Shopping List</h1>\n\n                {itemCB}\n            <form>\n                <input type=\"text\" placeholder=\"Add Item\" onChange={this.handleChange} />\n                <button onClick={this.addItem}>Go</button>\n            </form>\n        </div>\n        */\n       <Box className=\"box\">\n           <Card className=\"card\" variant=\"outlined\">\n               <CardHeader\n                   action={\n                       <Tooltip title=\"Add Item\"> \n                        <IconButton aria-label=\"add\" onClick={this.handleSelect}>\n                            <AddIcon style={{fill: \"#4caf50\"}} />\n                        </IconButton>\n                   </Tooltip>\n                   \n                    }\n                    title=\"Shopping List\"\n                />\n                <CardContent>\n                    {itemCB}\n                </CardContent>\n            </Card>\n       </Box>\n       \n    )\n}\n}\n \nexport default ShoppingList"]},"metadata":{},"sourceType":"module"}