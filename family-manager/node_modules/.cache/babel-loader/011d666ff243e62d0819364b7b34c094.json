{"ast":null,"code":"var _jsxFileName = \"/Users/carson/Documents/GitHub/family_manager/family-manager/src/components/SharedCalendar.jsx\";\nimport React, { Component } from 'react';\nimport { MuiPickersUtilsProvider, DatePicker, TimePicker } from '@material-ui/pickers';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport MomentUtils from '@date-io/moment';\nimport firebase from '../firebase.js';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css'; //TODO: On form for adding a user, specify if they are a child. If so, add that info to the DB\n//Under the child we can have a list of tasks\n//setup time localizer\n\nconst localizer = momentLocalizer(moment);\nconst CalendarStyles = {\n  calendarContainer: {\n    height: \"750px\",\n    width: \"75%\",\n    margin: \"0 auto\"\n  },\n  editFormContainer: {\n    height: \"500px\",\n    width: \"500px\",\n    margin: \"0 auto\",\n    marginTop: \"50px\"\n  }\n};\n/**\n * This is the shared calendar that displays user data\n * Data is stored in firebase\n */\n\nclass SharedCalendar extends Component {\n  constructor(props) {\n    super(props); //Initialize usersName and userEmail via props passed in from the parent\n\n    this.editEventInStorage = () => {\n      let updatedEvent = {\n        title: this.state.userEventTitle,\n        start: new Date(this.state.userEventStart),\n        end: new Date(this.state.userEventEnd)\n      }; //Store the events in a local array and then update the event that was modified\n\n      let eventArray = [...this.state.events];\n      let eventToRemove = eventArray.map(item => item.title).indexOf(updatedEvent.title);\n      eventArray.splice(eventToRemove, 1);\n      eventArray.push(updatedEvent);\n      this.setState({\n        events: eventArray\n      });\n      const db = firebase.firestore();\n      db.collection(\"UserCalendarData\").doc(this.state.fireDocId).update({\n        events: [...eventArray]\n      });\n    };\n\n    this.deleteEventInStorage = () => {\n      let updatedEvent = {\n        title: this.state.userEventTitle,\n        start: new Date(this.state.userEventStart),\n        end: new Date(this.state.userEventEnd)\n      }; //Remove the selected event from the local event array, then update state with the new event array\n\n      let eventArray = [...this.state.events];\n      let eventToRemove = eventArray.map(item => item.title).indexOf(updatedEvent.title);\n      eventArray.splice(eventToRemove, 1);\n      this.setState({\n        events: eventArray\n      });\n      const db = firebase.firestore();\n      db.collection(\"UserCalendarData\").doc(this.state.fireDocId).update({\n        events: [...eventArray]\n      });\n    };\n\n    this.handleSelect = ({\n      start,\n      end\n    }) => {\n      const title = window.prompt('Enter Event Name');\n\n      if (title) {\n        this.setState({\n          events: [...this.state.events, {\n            title,\n            start,\n            end\n          }]\n        });\n        this.updateStorage({\n          title,\n          start,\n          end\n        });\n      } else {\n        console.log(\"User didn't complete event info. Doing nothing/\");\n      }\n    };\n\n    this.handleClose = () => this.setState({\n      showEditForm: false\n    });\n\n    this.handleStartDateChange = e => this.setState({\n      userEventStart: e._d\n    });\n\n    this.handleEndDateChange = e => this.setState({\n      userEventEnd: e._d\n    });\n\n    this.handleTitleChange = e => this.setState({\n      userEventTitle: e.target.value\n    });\n\n    this.state = {\n      user: null,\n      usersName: this.props.usersName,\n      userEmail: this.props.userEmail,\n      fireDocId: null,\n      events: [],\n      showEditForm: false,\n      userEventTitle: \"null\",\n      userEventStart: \"null\",\n      userEventEnd: \"null\"\n    };\n    this.fetchUserData = this.fetchUserData.bind(this);\n    this.checkIfUserExists = this.checkIfUserExists.bind(this);\n    this.updateStorage = this.updateStorage.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n  }\n  /**\n   * The initial user data retrival call\n   */\n\n\n  componentDidMount() {\n    //Upon loading the component, check to see if a user exists\n    //Return data into the callback and execute a data update\n    this.checkIfUserExists(this.fetchUserData);\n  }\n  /**\n   * Checks to see if a signed in user has data in the DB\n   * Returns a boolean of the above condition into the callback\n   * @param {callback function} callback \n   */\n\n\n  checkIfUserExists(callback) {\n    //Connect to the firebase DB\n    const db = firebase.firestore(); //Query the DB to see if the users email is present\n\n    db.collection(\"UserCalendarData\").where(\"email\", \"==\", this.state.userEmail).get().then(querySnapshot => {\n      let userExists = false; //If the email isn't present, the user doesn't exist\n\n      if (querySnapshot.size === 0) {\n        userExists = false;\n      } else {\n        //If the email does exist, update the firestore document ID in state\n        this.setState({\n          fireDocId: querySnapshot.docs[0].id\n        });\n        userExists = true;\n      }\n\n      callback(userExists);\n    }).catch(error => {\n      console.log(\"Error Getting Documents! \" + error);\n    });\n  }\n  /**\n   * Loads user data into the calendar via a DB call and a state update\n   * @param {whether a user exists} userExists \n   */\n\n\n  fetchUserData(userExists) {\n    //If a user exists pull their event data from the DB\n    if (userExists) {\n      console.log('user exists, fetching data');\n      const db = firebase.firestore();\n      db.collection(\"UserCalendarData\").doc(this.state.fireDocId).get().then(doc => {\n        if (doc) {\n          let returnedData = doc.data().events;\n          console.log(returnedData); //Firebase returns time in the form of seconds from EPOCH\n          //toDate() converts it into a useable format\n\n          for (let i = 0; i < returnedData.length; i++) {\n            returnedData[i].start = returnedData[i].start.toDate();\n            returnedData[i].end = returnedData[i].end.toDate();\n          }\n\n          this.setState({\n            events: returnedData\n          });\n        } else {\n          console.log('Counldnt find user data');\n        }\n      }).catch(error => {\n        console.log(\"error fetching existing user data! \" + error);\n      });\n    } else {\n      //This block is executed if it's a users first time logging in\n      alert(\"Welcome, Start by adding some data to the calendar\"); //Create an entry in the DB for the new user, update the doc ref\n      //with the one retuned from add()\n\n      const db = firebase.firestore();\n      db.collection(\"UserCalendarData\").add({\n        email: this.state.userEmail,\n        name: this.state.usersName,\n        events: []\n      }).then(docRef => {\n        this.setState({\n          fireDocId: docRef.id\n        });\n      }).catch(error => {\n        console.log(\"error submitting first time user data\" + error);\n      });\n    }\n  }\n  /**\n   * When a new event is added send it to the DB \n   * @param {new event data} eventData \n   */\n\n\n  updateStorage(eventData) {\n    const db = firebase.firestore();\n    const userRef = db.collection(\"UserCalendarData\").doc(this.state.fireDocId).update({\n      events: firebase.firestore.FieldValue.arrayUnion(eventData)\n    });\n  }\n  /**\n   * Called when the user clicks update when editing an event,\n   * updates local array of events and sends an update to the DB\n   */\n\n\n  handleShow(event) {\n    this.setState({\n      userEventTitle: event.title.toString(),\n      userEventStart: moment.utc(event.start).format('LLL').toString(),\n      userEventEnd: moment.utc(event.end).format('LLL').toString(),\n      showEditForm: true\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: CalendarStyles.calendarContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(Calendar, {\n      selectable: true,\n      localizer: localizer,\n      events: this.state.events,\n      startAccess: \"start\",\n      endAccessor: \"end\",\n      onSelectEvent: event => this.handleShow(event),\n      onSelectSlot: this.handleSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, this.state.showEditForm ? React.createElement(\"div\", {\n      style: CalendarStyles.editFormContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"Edit Form\", React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(MuiPickersUtilsProvider, {\n      libInstance: moment,\n      utils: MomentUtils,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(DatePicker //   variant=\"inline\"\n    , {\n      format: \"MM/DD/YYYY\",\n      margin: \"normal\",\n      label: \"Start Date\",\n      value: this.state.userEventStart,\n      onChange: date => this.handleStartDateChange(date),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }), React.createElement(DatePicker //   variant=\"inline\"\n    , {\n      format: \"MM/DD/YYYY\",\n      margin: \"normal\",\n      label: \"End Date\",\n      value: this.state.userEventEnd,\n      onChange: date => this.handleEndDateChange(date),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }), React.createElement(TimePicker, {\n      autoOk: true,\n      label: \"Start Time\",\n      value: this.state.userEventStart,\n      onChange: time => this.handleStartDateChange(time),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), React.createElement(TimePicker, {\n      autoOk: true,\n      label: \"End Time\",\n      value: this.state.userEventEnd,\n      onChange: time => this.handleEndDateChange(time),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      label: \"Event Title\",\n      value: this.state.userEventTitle,\n      onChange: title => this.handleTitleChange(title),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    })), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.editEventInStorage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.deleteEventInStorage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"Delete Event\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, \"Close\"))) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default SharedCalendar;","map":{"version":3,"sources":["/Users/carson/Documents/GitHub/family_manager/family-manager/src/components/SharedCalendar.jsx"],"names":["React","Component","MuiPickersUtilsProvider","DatePicker","TimePicker","Button","TextField","MomentUtils","firebase","Calendar","momentLocalizer","moment","localizer","CalendarStyles","calendarContainer","height","width","margin","editFormContainer","marginTop","SharedCalendar","constructor","props","editEventInStorage","updatedEvent","title","state","userEventTitle","start","Date","userEventStart","end","userEventEnd","eventArray","events","eventToRemove","map","item","indexOf","splice","push","setState","db","firestore","collection","doc","fireDocId","update","deleteEventInStorage","handleSelect","window","prompt","updateStorage","console","log","handleClose","showEditForm","handleStartDateChange","e","_d","handleEndDateChange","handleTitleChange","target","value","user","usersName","userEmail","fetchUserData","bind","checkIfUserExists","handleShow","componentDidMount","callback","where","get","then","querySnapshot","userExists","size","docs","id","catch","error","returnedData","data","i","length","toDate","alert","add","email","name","docRef","eventData","userRef","FieldValue","arrayUnion","event","toString","utc","format","render","date","time"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    MuiPickersUtilsProvider,\n    DatePicker,\n    TimePicker\n  } from '@material-ui/pickers';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport MomentUtils from '@date-io/moment';\nimport firebase from '../firebase.js';\nimport { Calendar, momentLocalizer} from 'react-big-calendar';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\n\n\n//TODO: On form for adding a user, specify if they are a child. If so, add that info to the DB\n//Under the child we can have a list of tasks\n\n\n//setup time localizer\nconst localizer = momentLocalizer(moment);\n\nconst CalendarStyles = {\n    calendarContainer: {\n        height: \"750px\",\n        width: \"75%\",\n        margin: \"0 auto\"\n    },\n    editFormContainer: {\n        height: \"500px\",\n        width: \"500px\",\n        margin: \"0 auto\",\n        marginTop: \"50px\"\n    }\n}\n\n/**\n * This is the shared calendar that displays user data\n * Data is stored in firebase\n */\nclass SharedCalendar extends Component {\n    constructor(props){\n        super(props);\n\n        //Initialize usersName and userEmail via props passed in from the parent\n        this.state = {\n            user: null,\n            usersName: this.props.usersName,\n            userEmail: this.props.userEmail, \n            fireDocId: null,\n            events: [],\n            showEditForm: false,\n            userEventTitle: \"null\",\n            userEventStart: \"null\",\n            userEventEnd: \"null\",\n        };\n        \n        this.fetchUserData = this.fetchUserData.bind(this);\n        this.checkIfUserExists = this.checkIfUserExists.bind(this);\n        this.updateStorage = this.updateStorage.bind(this);\n        this.handleShow = this.handleShow.bind(this);\n    }\n\n    /**\n     * The initial user data retrival call\n     */\n    componentDidMount() {\n        //Upon loading the component, check to see if a user exists\n        //Return data into the callback and execute a data update\n        this.checkIfUserExists(this.fetchUserData)\n    }\n\n    /**\n     * Checks to see if a signed in user has data in the DB\n     * Returns a boolean of the above condition into the callback\n     * @param {callback function} callback \n     */\n    checkIfUserExists(callback) {\n        //Connect to the firebase DB\n        const db = firebase.firestore();\n\n        //Query the DB to see if the users email is present\n        db.collection(\"UserCalendarData\").where(\"email\", \"==\", this.state.userEmail)\n            .get()\n            .then((querySnapshot) => {\n                let userExists = false;\n\n                //If the email isn't present, the user doesn't exist\n                if(querySnapshot.size === 0) {\n                    userExists = false;\n                } else {\n                    //If the email does exist, update the firestore document ID in state\n                    this.setState({fireDocId: querySnapshot.docs[0].id});\n                    userExists = true;\n                }\n                callback(userExists)\n            })\n            .catch((error) => {\n                console.log(\"Error Getting Documents! \" + error);\n            });\n    }\n\n    /**\n     * Loads user data into the calendar via a DB call and a state update\n     * @param {whether a user exists} userExists \n     */\n    fetchUserData(userExists) {\n\n        //If a user exists pull their event data from the DB\n        if(userExists) {\n            console.log('user exists, fetching data');\n            const db = firebase.firestore();\n            db.collection(\"UserCalendarData\").doc(this.state.fireDocId)\n                .get()\n                .then((doc) => {\n                    if(doc) {\n                        let returnedData = doc.data().events;\n                        console.log(returnedData);\n                        //Firebase returns time in the form of seconds from EPOCH\n                        //toDate() converts it into a useable format\n                        for(let i = 0; i < returnedData.length; i++) {\n                            returnedData[i].start = returnedData[i].start.toDate();\n                            returnedData[i].end = returnedData[i].end.toDate();\n                        }\n                        \n                        this.setState({events: returnedData});\n                    } else {\n                        console.log('Counldnt find user data');\n                    }\n                })\n                .catch((error) => {\n                    console.log(\"error fetching existing user data! \" + error);\n                })\n        } else {\n            //This block is executed if it's a users first time logging in\n            alert(\"Welcome, Start by adding some data to the calendar\");\n            \n            //Create an entry in the DB for the new user, update the doc ref\n            //with the one retuned from add()\n            const db = firebase.firestore();\n            db.collection(\"UserCalendarData\").add({\n                email: this.state.userEmail,\n                name: this.state.usersName,\n                events: []\n            }).then((docRef) => {\n                this.setState({fireDocId: docRef.id});\n            })\n            .catch((error) => {\n                console.log(\"error submitting first time user data\" + error); \n            })\n        }\n    }\n\n    /**\n     * When a new event is added send it to the DB \n     * @param {new event data} eventData \n     */\n    updateStorage(eventData) {\n        const db = firebase.firestore();\n        const userRef = db.collection(\"UserCalendarData\").doc(this.state.fireDocId).update({\n            events: firebase.firestore.FieldValue.arrayUnion(eventData)\n        });\n    }\n\n    /**\n     * Called when the user clicks update when editing an event,\n     * updates local array of events and sends an update to the DB\n     */\n    editEventInStorage = () => {\n        let updatedEvent = {\n            title: this.state.userEventTitle,\n            start: new Date(this.state.userEventStart),\n            end: new Date (this.state.userEventEnd)\n        }\n\n        //Store the events in a local array and then update the event that was modified\n        let eventArray = [...this.state.events];\n        let eventToRemove = eventArray.map((item) => item.title).indexOf(updatedEvent.title);\n        eventArray.splice(eventToRemove, 1);\n        eventArray.push(updatedEvent)\n        this.setState({events: eventArray});\n\n         const db = firebase.firestore();\n         db.collection(\"UserCalendarData\").doc(this.state.fireDocId).update({\n             events: [...eventArray]\n         });\n    }\n\n    /**\n     * Callend when the user clicks delete when editing an event,\n     * updates local array of events and sends an update to the DB\n     */\n    deleteEventInStorage = () => {\n        let updatedEvent = {\n            title: this.state.userEventTitle,\n            start: new Date(this.state.userEventStart),\n            end: new Date (this.state.userEventEnd)\n        }\n\n        //Remove the selected event from the local event array, then update state with the new event array\n        let eventArray = [...this.state.events];\n        let eventToRemove = eventArray.map((item) => item.title).indexOf(updatedEvent.title);\n        eventArray.splice(eventToRemove, 1);\n        this.setState({events: eventArray});\n\n        const db = firebase.firestore();\n        db.collection(\"UserCalendarData\").doc(this.state.fireDocId).update({\n            events: [...eventArray]\n        });\n    }\n\n    /**\n     * Called when a date is selected on the calendar, \n     * Updates the components event list in state, calls a \n     * method to send the new event to the DB\n     */\n    handleSelect = ({ start, end }) => {\n        const title = window.prompt('Enter Event Name');\n        if (title) {\n            this.setState({\n                events: [\n                    ...this.state.events,\n                    {\n                        title, \n                        start,\n                        end\n                    },\n                ],\n            });\n            this.updateStorage({title, start, end});\n        } else {\n            console.log(\"User didn't complete event info. Doing nothing/\")\n        }\n    }\n\n    handleClose = () => this.setState({showEditForm: false})\n\n    handleShow(event) {\n        this.setState({\n            userEventTitle: event.title.toString(), \n            userEventStart: moment.utc(event.start).format('LLL').toString(), \n            userEventEnd: moment.utc(event.end).format('LLL').toString(), \n            showEditForm: true\n        });\n    }\n\n    handleStartDateChange = (e) => this.setState({userEventStart: e._d});\n    handleEndDateChange = (e) => this.setState({userEventEnd: e._d});\n    handleTitleChange = (e) => this.setState({userEventTitle: e.target.value});\n\n    render() {\n        return(\n        <div>\n            <div style={CalendarStyles.calendarContainer}>\n                <Calendar\n                    selectable\n                    localizer={localizer}\n                    events={this.state.events}\n                    startAccess=\"start\"\n                    endAccessor=\"end\"\n                    onSelectEvent={event => this.handleShow(event)}\n                    onSelectSlot={this.handleSelect}\n                />\n            </div>\n            <div>\n                {this.state.showEditForm ? \n                   <div style={CalendarStyles.editFormContainer}>\n                        Edit Form \n                        <form>\n                            <MuiPickersUtilsProvider libInstance={moment} utils={MomentUtils}>\n                                <DatePicker \n                                //   variant=\"inline\"\n                                  format=\"MM/DD/YYYY\"\n                                  margin=\"normal\"\n                                  label=\"Start Date\"\n                                  value={this.state.userEventStart}     \n                                  onChange={date => this.handleStartDateChange(date)}   \n                                />\n                                <DatePicker \n                                //   variant=\"inline\"\n                                  format=\"MM/DD/YYYY\"\n                                  margin=\"normal\"\n                                  label=\"End Date\"\n                                  value={this.state.userEventEnd}\n                                  onChange={date => this.handleEndDateChange(date)}\n                                />\n                                <TimePicker\n                                  autoOk \n                                  label=\"Start Time\"\n                                  value={this.state.userEventStart}\n                                  onChange={time => this.handleStartDateChange(time)}\n                                />\n                                <TimePicker\n                                  autoOk \n                                  label=\"End Time\"\n                                  value={this.state.userEventEnd}\n                                  onChange={time => this.handleEndDateChange(time)}\n                                />\n                                <TextField label=\"Event Title\" value={this.state.userEventTitle} onChange={title => this.handleTitleChange(title)} />\n                            </MuiPickersUtilsProvider>\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.editEventInStorage}>Submit</Button>\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.deleteEventInStorage}>Delete Event</Button>\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.handleClose}>Close</Button>\n\n                        </form>\n                   </div>\n                   :\n                   <div></div> \n                }\n            </div>\n        </div>\n\n        )\n    }\n}\n\nexport default SharedCalendar;\n"]},"metadata":{},"sourceType":"module"}